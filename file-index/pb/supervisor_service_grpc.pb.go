// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--rc2
// source: supervisor_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileIndex_ListFiles_FullMethodName        = "/filesystem_discovery.FileIndex/ListFiles"
	FileIndex_GetCheckSumFiles_FullMethodName = "/filesystem_discovery.FileIndex/GetCheckSumFiles"
)

// FileIndexClient is the client API for FileIndex service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileIndexClient interface {
	ListFiles(ctx context.Context, in *CreateFileDiscoverRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CreateFileDiscoverResponse], error)
	GetCheckSumFiles(ctx context.Context, in *CreateFileChecksumRequest, opts ...grpc.CallOption) (*CreateFileChecksumResponse, error)
}

type fileIndexClient struct {
	cc grpc.ClientConnInterface
}

func NewFileIndexClient(cc grpc.ClientConnInterface) FileIndexClient {
	return &fileIndexClient{cc}
}

func (c *fileIndexClient) ListFiles(ctx context.Context, in *CreateFileDiscoverRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CreateFileDiscoverResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileIndex_ServiceDesc.Streams[0], FileIndex_ListFiles_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CreateFileDiscoverRequest, CreateFileDiscoverResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileIndex_ListFilesClient = grpc.ServerStreamingClient[CreateFileDiscoverResponse]

func (c *fileIndexClient) GetCheckSumFiles(ctx context.Context, in *CreateFileChecksumRequest, opts ...grpc.CallOption) (*CreateFileChecksumResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFileChecksumResponse)
	err := c.cc.Invoke(ctx, FileIndex_GetCheckSumFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileIndexServer is the server API for FileIndex service.
// All implementations must embed UnimplementedFileIndexServer
// for forward compatibility.
type FileIndexServer interface {
	ListFiles(*CreateFileDiscoverRequest, grpc.ServerStreamingServer[CreateFileDiscoverResponse]) error
	GetCheckSumFiles(context.Context, *CreateFileChecksumRequest) (*CreateFileChecksumResponse, error)
	mustEmbedUnimplementedFileIndexServer()
}

// UnimplementedFileIndexServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileIndexServer struct{}

func (UnimplementedFileIndexServer) ListFiles(*CreateFileDiscoverRequest, grpc.ServerStreamingServer[CreateFileDiscoverResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedFileIndexServer) GetCheckSumFiles(context.Context, *CreateFileChecksumRequest) (*CreateFileChecksumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckSumFiles not implemented")
}
func (UnimplementedFileIndexServer) mustEmbedUnimplementedFileIndexServer() {}
func (UnimplementedFileIndexServer) testEmbeddedByValue()                   {}

// UnsafeFileIndexServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileIndexServer will
// result in compilation errors.
type UnsafeFileIndexServer interface {
	mustEmbedUnimplementedFileIndexServer()
}

func RegisterFileIndexServer(s grpc.ServiceRegistrar, srv FileIndexServer) {
	// If the following call pancis, it indicates UnimplementedFileIndexServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileIndex_ServiceDesc, srv)
}

func _FileIndex_ListFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateFileDiscoverRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileIndexServer).ListFiles(m, &grpc.GenericServerStream[CreateFileDiscoverRequest, CreateFileDiscoverResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileIndex_ListFilesServer = grpc.ServerStreamingServer[CreateFileDiscoverResponse]

func _FileIndex_GetCheckSumFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFileChecksumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileIndexServer).GetCheckSumFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileIndex_GetCheckSumFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileIndexServer).GetCheckSumFiles(ctx, req.(*CreateFileChecksumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileIndex_ServiceDesc is the grpc.ServiceDesc for FileIndex service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileIndex_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filesystem_discovery.FileIndex",
	HandlerType: (*FileIndexServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCheckSumFiles",
			Handler:    _FileIndex_GetCheckSumFiles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListFiles",
			Handler:       _FileIndex_ListFiles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "supervisor_service.proto",
}
