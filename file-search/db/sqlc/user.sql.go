// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email,
  username,
  password,
  password_hash,
  phone,
  fullname,
  avatar,
  state,
  role,
  created_at,
  update_at
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING id, email, username, password, password_hash, phone, fullname, avatar, state, role, created_at, update_at
`

type CreateUserParams struct {
	Email        string    `json:"email"`
	Username     string    `json:"username"`
	Password     string    `json:"password"`
	PasswordHash string    `json:"password_hash"`
	Phone        string    `json:"phone"`
	Fullname     string    `json:"fullname"`
	Avatar       string    `json:"avatar"`
	State        int64     `json:"state"`
	Role         string    `json:"role"`
	CreatedAt    time.Time `json:"created_at"`
	UpdateAt     time.Time `json:"update_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.Username,
		arg.Password,
		arg.PasswordHash,
		arg.Phone,
		arg.Fullname,
		arg.Avatar,
		arg.State,
		arg.Role,
		arg.CreatedAt,
		arg.UpdateAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.PasswordHash,
		&i.Phone,
		&i.Fullname,
		&i.Avatar,
		&i.State,
		&i.Role,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
UPDATE users
SET state = $1
WHERE id = $2
RETURNING id, email, username, password, password_hash, phone, fullname, avatar, state, role, created_at, update_at
`

type DeleteUserParams struct {
	State int64 `json:"state"`
	ID    int32 `json:"id"`
}

func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, deleteUser, arg.State, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.PasswordHash,
		&i.Phone,
		&i.Fullname,
		&i.Avatar,
		&i.State,
		&i.Role,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, username, password, password_hash, phone, fullname, avatar, state, role, created_at, update_at FROM users
WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.PasswordHash,
		&i.Phone,
		&i.Fullname,
		&i.Avatar,
		&i.State,
		&i.Role,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const getUsersAsc = `-- name: GetUsersAsc :many
SELECT id, email, username, password, password_hash, phone, fullname, avatar, state, role, created_at, update_at FROM users
WHERE (username ILIKE '%' || $1 || '%' OR fullname ILIKE '%' || $1 || '%')
  AND state = $5
ORDER BY 
  CASE WHEN $4 = 'id' THEN id END ASC,
  CASE WHEN $4 = 'username' THEN username END ASC,
  CASE WHEN $4 = 'fullname' THEN fullname END ASC
LIMIT $2 OFFSET $3
`

type GetUsersAscParams struct {
	Column1 sql.NullString `json:"column_1"`
	Limit   int32          `json:"limit"`
	Offset  int32          `json:"offset"`
	Column4 interface{}    `json:"column_4"`
	State   int64          `json:"state"`
}

func (q *Queries) GetUsersAsc(ctx context.Context, arg GetUsersAscParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsersAsc,
		arg.Column1,
		arg.Limit,
		arg.Offset,
		arg.Column4,
		arg.State,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Username,
			&i.Password,
			&i.PasswordHash,
			&i.Phone,
			&i.Fullname,
			&i.Avatar,
			&i.State,
			&i.Role,
			&i.CreatedAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersDesc = `-- name: GetUsersDesc :many
SELECT id, email, username, password, password_hash, phone, fullname, avatar, state, role, created_at, update_at FROM users
WHERE (username ILIKE '%' || $1 || '%' OR fullname ILIKE '%' || $1 || '%')
  AND state = $5
ORDER BY
  CASE WHEN $4 = 'id' THEN id END DESC,
  CASE WHEN $4 = 'username' THEN username END DESC,
  CASE WHEN $4 = 'fullname' THEN fullname END DESC
LIMIT $2 OFFSET $3
`

type GetUsersDescParams struct {
	Column1 sql.NullString `json:"column_1"`
	Limit   int32          `json:"limit"`
	Offset  int32          `json:"offset"`
	Column4 interface{}    `json:"column_4"`
	State   int64          `json:"state"`
}

func (q *Queries) GetUsersDesc(ctx context.Context, arg GetUsersDescParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsersDesc,
		arg.Column1,
		arg.Limit,
		arg.Offset,
		arg.Column4,
		arg.State,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Username,
			&i.Password,
			&i.PasswordHash,
			&i.Phone,
			&i.Fullname,
			&i.Avatar,
			&i.State,
			&i.Role,
			&i.CreatedAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
  fullname = COALESCE($1, fullname),
  email = COALESCE($2, email),
  phone = COALESCE($3, phone),
  password = COALESCE($4, password),
  avatar = COALESCE($5, avatar),
  role = COALESCE($6, role),
  password_hash = COALESCE($7, password_hash)
WHERE
  username = $8
RETURNING id, email, username, password, password_hash, phone, fullname, avatar, state, role, created_at, update_at
`

type UpdateUserParams struct {
	Fullname     sql.NullString `json:"fullname"`
	Email        sql.NullString `json:"email"`
	Phone        sql.NullString `json:"phone"`
	Password     sql.NullString `json:"password"`
	Avatar       sql.NullString `json:"avatar"`
	Role         sql.NullString `json:"role"`
	PasswordHash sql.NullString `json:"password_hash"`
	Username     string         `json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Fullname,
		arg.Email,
		arg.Phone,
		arg.Password,
		arg.Avatar,
		arg.Role,
		arg.PasswordHash,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.PasswordHash,
		&i.Phone,
		&i.Fullname,
		&i.Avatar,
		&i.State,
		&i.Role,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}
